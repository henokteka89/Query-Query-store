DECLARE @start_time DATETIMEOFFSET(7) =  CAST(DATEADD(day, -30, SYSDATETIMEOFFSET()) AS datetimeoffset(7))
DECLARE @end_time DATETIMEOFFSET(7)   =  CAST(DATEADD(day, -1, SYSDATETIMEOFFSET()) AS datetimeoffset(7))
SELECT
            @start_time [start_time],
            @end_time [end_time],
            p.query_id query_id,    
            q.object_id object_id,      
            OBJECT_NAME(q.object_id) [object_name],
            qt.query_sql_text query_sql_text,    
            ROUND(CONVERT(float, SUM(rs.avg_duration * rs.count_executions)) / (SUM(rs.count_executions)) * 0.001,2) [avg duration],
            ROUND(CONVERT(float, SUM(rs.avg_cpu_time * rs.count_executions)) / (SUM(rs.count_executions)) * 0.001 ,2) [avg cpu time],
            ROUND(CONVERT(float, SUM(rs.avg_logical_io_writes * rs.count_executions)) / (SUM(rs.count_executions)) * 8 ,2) [avg logical writes],
            ROUND(CONVERT(float, SUM(rs.avg_logical_io_reads * rs.count_executions)) / (SUM(rs.count_executions)) * 8 ,2) [avg logical reads],
            ROUND(CONVERT(float, SUM(rs.avg_physical_io_reads * rs.count_executions)) / (SUM(rs.count_executions)) * 8,2) [avg physical reads],    
            ROUND(CONVERT(float, SUM(rs.avg_clr_time * rs.count_executions)) / (SUM(rs.count_executions)) * 0.001,2) [avg clr time],
            ROUND(CONVERT(float, SUM(rs.avg_dop * rs.count_executions)) / (SUM(rs.count_executions)) * 1,0) [avg dop],    
            ROUND(CONVERT(float, SUM(rs.avg_query_max_used_memory * rs.count_executions)) / (SUM(rs.count_executions)) * 8,2) [avg memory consumption],
            ROUND(CONVERT(float, SUM(rs.avg_rowcount * rs.count_executions)) / (SUM(rs.count_executions)) ,0) [avg row count],
            ROUND(CONVERT(float, SUM(rs.avg_log_bytes_used * rs.count_executions)) / (SUM(rs.count_executions)) * 0.0009765625,2) [avg log memory used],
            ROUND(CONVERT(float, SUM(rs.avg_duration*rs.count_executions)) * 0.001,2) [total duration],      
            ROUND(CONVERT(float, SUM(rs.avg_cpu_time*rs.count_executions)) * 0.001,2) [total cpu time],    
            ROUND(CONVERT(float, SUM(rs.avg_logical_io_reads*rs.count_executions)) * 8,2) [total logical reads],      
            ROUND(CONVERT(float, SUM(rs.avg_logical_io_writes*rs.count_executions)) * 8,2) [total logical writes],      
            ROUND(CONVERT(float, SUM(rs.avg_physical_io_reads*rs.count_executions)) * 8,2) [total physical reads],    
            ROUND(CONVERT(float, SUM(rs.avg_clr_time*rs.count_executions)) * 0.001,2) [total clr time],    
            ROUND(CONVERT(float, SUM(rs.avg_dop*rs.count_executions)) * 1,0) [total dop],      
            ROUND(CONVERT(float, SUM(rs.avg_query_max_used_memory*rs.count_executions)) * 8,2) [total memory consumption],      
            ROUND(CONVERT(float, SUM(rs.avg_rowcount*rs.count_executions)) * 1,0) [total row count],      
            ROUND(CONVERT(float, SUM(rs.avg_log_bytes_used*rs.count_executions)) * 0.0009765625,2) [total log memory used],      
            ROUND(CONVERT(float, SUM(rs.avg_tempdb_space_used*rs.count_executions)) * 8,2) [total tempdb memory used],  
            SUM(rs.count_executions) [execution count],      
            COUNT(distinct p.plan_id) num_plans  
          FROM
            sys.query_store_runtime_stats rs INNER JOIN
            sys.query_store_plan p ON p.plan_id = rs.plan_id INNER JOIN
            sys.query_store_query q ON q.query_id = p.query_id INNER JOIN
            sys.query_store_query_text qt ON q.query_text_id = qt.query_text_id  
          WHERE
            NOT (rs.last_execution_time < @start_time OR rs.first_execution_time > @end_time)
          GROUP BY
            p.query_id,
            qt.query_sql_text,
            q.object_id
OPTION (RECOMPILE)

--https://d-bart.com/bypass-slow-query-store-interface-with-t-sql-query/
